<file> ::= {<file-element>}*

<file-element> ::= <static-declaration>
                 | <record-declaration>
                 | <function-declaration>

<static-declaration> ::= static [extern | export] <idenitifer> [: <type-declaration>] [= <expression>] ;

<record-declaration> ::= record <identifier> { [<declaration-list>] } ;

<function-declaration> ::= fn [extern | export] <identifier> ( [<parameters>] ) [-> <type-declaration>] <block-or-semicolon>

<parameters> ::= <declaration-list>
               | <declaration-list> , ...
               | ...

<block-or-semicolon> ::= <block-statement>
                       | ;

<declaration-list> ::= <declaration>
                     | <declaration-list> , <declaration>

<declaration> ::= <identifier> : <type-declaration>

<type-declaration> ::= bool
                     | u8
                     | i8
                     | u16
                     | i16
                     | u32
                     | i32
                     | u64
                     | i64
                     | usize
                     | <identifier>
                     | * <type-declaration>
                     | [ <type-declaration> ; <expression> ]
                     | fn ( <type-list> ) [-> <type-declaration>]

<type-list> ::= <type-declaration>
              | <type-list> , <type-declaration>

<statement> ::= <block-statement>
              | <if-statement>
              | <while-statement>
              | <identifier> :
              | jmp <identifier> ;
              | let <identifier> [: <type-declaration>] [= <expression>] ;
              | ret [<expression>] ;
              | <expression> ;
              | <expression> = <expression> ;

<block-statement> ::= { {<statement>}* }

<if-statement> ::= if ( <expression> ) <block-statement> [else (<if-statement>|<block-statement>)]

<while-statement> ::= while ( <expression> ) <block-statement>

<expression> ::= <lor-expression>

<lor-expression> ::= <land-expression>
                   | <lor-expression> || <land-expression>

<land-expression> ::= <compare-expression>
                    | <land-expression> && <compare-expression>

<compare-expression> ::= <or-expression>
                       | <or-expression> == <or-expression>
                       | <or-expression> != <or-expression>
                       | <or-expression> <  <or-expression>
                       | <or-expression> <= <or-expression>
                       | <or-expression> >  <or-expression>
                       | <or-expression> >= <or-expression>

<or-expression> ::= <xor-expression>
                  | <or-expression> | <xor-expression>

<xor-expression> ::= <and-expression>
                   | <xor-expression> ^ <and-expression>

<and-expression> ::= <shift-expression>
                   | <and-expression> & <shift-expression>

<shift-expression> ::= <additive-expression>
                     | <shift-expression> << <additive-expression>
                     | <shift-expression> >> <additive-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> + <multiplicative-expression>
                        | <additive-expression> - <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> * <cast-expression>
                              | <multiplicative-expression> / <cast-expression>
                              | <multiplicative-expression> % <cast-expression>

<cast-expression> ::= <unary-expression>
                    | <cast-expression> as <type-declaration>

<unary-expression> ::= <postfix-expression>
                     | + <unary-expression>
                     | - <unary-expression>
                     | ~ <unary-expression>
                     | ! <unary-expression>
                     | & <unary-expression>
                     | * <unary-expression>

<postfix-expression> ::= <primary-expression>
                       | <postfix-expression> ( [<expression-list>] )
                       | <postfix-expression> [ <expression> ]
                       | <postfix-expression> . <identifier>

<primary-expression> ::= ( <expression> )
                       | <array-literal>
                       | <record-literal>
                       | <string-literal> [<type-suffix>]
                       | <integer-constant> [<type-suffix>]
                       | <char-constant> [<type-suffix>]
                       | <bool-constant>
                       | <identifier>

<array-literal> ::= [ <expression-list> ]

<expression-list> ::= <expression>
                    | <expression-list> , <expression>

<record-literal> ::= <identifier> { <named-expression-list> }

<named-expression-list> ::= <named-expression>
                          | <named-expression-list> , <named-expression>

<named-expression> ::= <identifier> : <expression>

<type-suffix> ::= u8
                | i8
                | u16
                | i16
                | u32
                | i32
                | u64
                | i64

<bool-constant> ::= true
                  | false
